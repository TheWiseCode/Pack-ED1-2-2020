// ---------------------------------------------------------------------------

#ifndef UListaH
#define UListaH
// ---------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "Funciones.h"
#include "UMemoria.h"

using namespace std;

const int MAXVe = 100;

typedef int direccionI;

struct NodoLi {
	int elemento;
	NodoLi* sig;
};

typedef NodoLi* direccionPtr;

const string datosNL = "elemento,sig";
const string elemNL = "->elemento";
const string sigNL = "->sig";

class ListV {
private:
	int* elementos; // int elementos[MAXV];
	int longit;

public:
	ListV();
	direccionI fin();
	direccionI primero();
	direccionI siguiente(direccionI d);
	direccionI anterior(direccionI d);
	bool vacia();
	int recupera(direccionI d);
	int longitud();
	void inserta(direccionI d, int e);
	void inserta_primero(int e);
	void inserta_ultimo(int e);
	void suprime(direccionI d);
	void modifica(direccionI d, int e);
	string to_str();
	direccionI localiza(int e);
	void elimina_dato(int e);
	void anula();
};

class ListP {
private:
	direccionPtr ptr_elementos;
	int longit;

public:
	ListP();
	direccionPtr fin();
	direccionPtr primero();
	direccionPtr siguiente(direccionPtr d);
	direccionPtr anterior(direccionPtr d);
	bool vacia();
	int recupera(direccionPtr d);
	int longitud();
	void inserta(direccionPtr d, int e);
	void inserta_primero(int e);
	void inserta_ultimo(int e);
	void suprime(direccionPtr d);
	void modifica(direccionPtr d, int e);
	string to_str();
	direccionPtr localiza(int e);
	void elimina_dato(int e);
	void anula();
};

class ListS {
private:
	int ptr_elementos;
	int longit;
	CSMemoria* mem;

public:
	ListS();
	ListS(CSMemoria* m);
	int fin();
	int primero();
	int siguiente(int d);
	int anterior(int d);
	bool vacia();
	int recupera(int d);
	int longitud();
	void inserta(int d, int e);
	void inserta_primero(int e);
	void inserta_ultimo(int e);
	void suprime(int d);
	void modifica(int d, int e);
	string to_str();
	int localiza(int e);
	void elimina_dato(int e);
	void anula();
};

#endif
