// ---------------------------------------------------------------------------

#pragma hdrstop

#include "UPoliLGU.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

PoliLGU::PoliLGU() {
	k = new ListaP();
}

bool PoliLGU::es_cero() {
	return k->longitud() == 0;
}

NodoL* PoliLGU::buscar_exp(int exp) {
	NodoL* aux = k->primero();
	while (aux != k->fin()) {
		if (k->recupera(aux) == exp)
			return aux;
		aux = k->siguiente(k->siguiente(aux));
	}
	return NULL;
}

void PoliLGU::actualizarGrado() {
	NodoL* aux = k->primero();
	int may = k->recupera(aux);
	while (aux != k->fin()) {
		int el = k->recupera(aux);
		if (k->recupera(aux) > may)
			may = el;
		aux = k->siguiente(k->siguiente(aux));
	}
	k->modifica(k->fin(), may);
}

void PoliLGU::poner_termino(int coef, int exp) {
	if (es_cero()) {
		k->inserta_ultimo(exp);
		k->inserta_ultimo(coef);
		k->inserta_ultimo(exp);
	}
	else {
		NodoL* encExp = buscar_exp(exp);
		if (encExp == NULL) { // Nueva insercion
			k->inserta_primero(coef);
			k->inserta_primero(exp);
			if (exp > grado())
				k->modifica(k->fin(), exp);
		}
		else {
			NodoL* sig = k->siguiente(encExp);
			int nuevo_coef = coef + k->recupera(sig);
			k->modifica(sig, nuevo_coef);
			if (nuevo_coef == 0) {
				k->suprime(sig);
				k->suprime(encExp);
				if (exp == grado())
					actualizarGrado();
			}
		}
	}
}

int PoliLGU::coeficiente(int exp) {
	NodoL* encExp = buscar_exp(exp);
	if (encExp == NULL) {
		cout << "NO EXISTE TERMINO CON ESE EXPONENTE\n";
	}
}

int PoliLGU::exponente(int nro_termino) {
	int c = 1;
	NodoL* aux = k->primero();
	while (aux != k->fin()) {
		if (c == nro_termino)
			return k->recupera(aux);
		c++;
		aux = k->siguiente(k->siguiente(aux));
	}
}

int PoliLGU::grado() {
	if (es_cero()) {
		cout << "NO HAY TERMINOS EN EL POLINOMIO\n";
	}
	else {
		return k->recupera(k->fin());
	}
}

int PoliLGU::numero_terminos() {
	return (k->longitud() - 1) / 2;
}

string PoliLGU::to_str() {
	return k->to_str();
}
